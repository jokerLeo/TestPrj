spring:
  datasource:
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      #      filter:
      #        stat:
      #          enabled: true
      #          db-type: mysql
      #          log-slow-sql: true
      #          slow-sql-millis: 2000
      #          merge-sql: true
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
        session-stat-enable: true
        session-stat-max-count: 1000
      # 配置DruidStatViewServlet
      stat-view-servlet:
        enabled: true
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        # allow: 127.0.0.1,192.168.46.120
        # IP黑名单 (存在共同时，deny优先于allow)
        # deny: 192.168.46.121
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456

  dubbo:
    application:
      name: ray-iflow-rpc-service
      registry: zookeeper://192.168.125.161:2183
    protocol:
      id: dubbo
      name: dubbo
      port: 20881
      status: server
  #sharding配置
  shardingsphere:
    dataSource:
      names: master0,master1,master0-slave1,master0-slave2,master1-slave1
      master0:
        type: com.alibaba.druid.pool.DruidDataSource
        #自定义的配置项，因为type为DruidDataSource，需要特别配置filters，否则shardingsphere注入的DruidDataSource不含filters，不能实现相关的监控功能
        filters: com.alibaba.druid.filter.stat.StatFilter,com.alibaba.druid.wall.WallFilter,com.alibaba.druid.filter.logging.Log4j2Filter
        url: jdbc:mysql://192.168.125.161:36005/iflow?autoReconnect=true&useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=CTT
        username: root
        #使用了自定义的AES对称加密，启动时需要添加启动参数-Denc.key=${自定义的key},用ray-common中的AESUtil加密
        #如果不需要去除enc:前缀即可
        password: enc:jEhi6SfY38B7rIB9wrFZ1w==
        driver-class-name: com.mysql.cj.jdbc.Driver
      master0-slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        filters: com.alibaba.druid.filter.stat.StatFilter,com.alibaba.druid.wall.WallFilter,com.alibaba.druid.filter.logging.Log4j2Filter
        url: jdbc:mysql://192.168.125.161:36006/iflow?autoReconnect=true&useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=CTT
        username: root
        password: enc:jEhi6SfY38B7rIB9wrFZ1w==
        driver-class-name: com.mysql.cj.jdbc.Driver
      master0-slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        filters: com.alibaba.druid.filter.stat.StatFilter,com.alibaba.druid.wall.WallFilter,com.alibaba.druid.filter.logging.Log4j2Filter
        url: jdbc:mysql://192.168.125.161:36007/iflow?autoReconnect=true&useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=CTT
        username: root
        password: enc:jEhi6SfY38B7rIB9wrFZ1w==
        driver-class-name: com.mysql.cj.jdbc.Driver
      master1:
        type: com.alibaba.druid.pool.DruidDataSource
        filters: com.alibaba.druid.filter.stat.StatFilter,com.alibaba.druid.wall.WallFilter,com.alibaba.druid.filter.logging.Log4j2Filter
        url: jdbc:mysql://192.168.125.161:36008/iflow?autoReconnect=true&useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=CTT
        username: root
        password: enc:jEhi6SfY38B7rIB9wrFZ1w==
        driver-class-name: com.mysql.cj.jdbc.Driver
      master1-slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        filters: com.alibaba.druid.filter.stat.StatFilter,com.alibaba.druid.wall.WallFilter,com.alibaba.druid.filter.logging.Log4j2Filter
        url: jdbc:mysql://192.168.125.161:36009/iflow?autoReconnect=true&useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useSSL=false&serverTimezone=CTT
        username: root
        password: enc:jEhi6SfY38B7rIB9wrFZ1w==
        driver-class-name: com.mysql.cj.jdbc.Driver
    #分库分表
    sharding:
      tables:
        operation:
          #此处有坑，如果配置了master-slave-rules则需要用其中配置的数据源
          #actual-data-nodes: master$->{0..1}.operation_$->{0..1}
          #表规则
          actual-data-nodes: db_master_$->{0..1}.operation_$->{0..1}
          #分库策略
          database-strategy:
            inline:
              sharding-column: assess_status
              #和上面同样的坑，如果配置了master-slave-rules则需要用其中配置的数据源，
              #但是io.shardingsphere的starter确可以直接取datasource中的数据源
              algorithm-expression: db_master_$->{assess_status%2}
          #分表策略
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: operation_$->{id % 2}
      #      default-key-generator:
      #        type: SnowflakeShardingKeyGenerator
      #        column: id
      master-slave-rules:
        db_master_0:
          name: m0s2
          master-data-source-name: master0
          slave-data-source-names: master0-slave1,master0-slave2
        db_master_1:
          name: m1s1
          master-data-source-name: master1
          slave-data-source-names: master1-slave1

    props:
      sql:
        show: true

server:
  tomcat:
    uri-encoding: UTF-8
  port: 8085

mybatis-plus:
  datasource: dataSource
  mapper-locations: classpath*:/mappers/**/**Mapper.xml
  typeAliasesPackage: com.mrray.ray.iflow.dao.base.model
  configuration:
    cache-enabled: false

